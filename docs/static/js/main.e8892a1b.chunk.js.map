{"version":3,"sources":["logo.svg","Home.js","Play.js","App.js","reportWebVitals.js","index.js"],"names":["Home","totalNumberOfGames","appStartGame","gameTimeFacts","history","useHistory","onClick","push","isFinite","longest","shortest","Play","appWinGame","appLoseGame","goBack","App","useState","gameResults","currentGameStartTime","appData","updateAppData","console","log","path","startDateTime","endDateTime","Date","now","gameResult","length","gameTimes","map","x","Math","max","min","calculateGameTimeFacts","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OAAe,I,2BCIFA,EAAO,SAAC,GAId,IAHHC,EAGE,EAHFA,mBACEC,EAEA,EAFAA,aACAC,EACA,EADAA,cAGIC,EAAUC,cAOhB,OACI,qCACI,wCACWJ,EADX,OAIA,wBACIK,QAZM,WACdJ,IACAE,EAAQG,KAAK,UAST,kBAMA,+BACMC,SAASL,EAAcM,SAAWN,EAAcM,QAAU,EADhE,wBAIA,+BACMD,SAASL,EAAcO,UAAYP,EAAcO,SAAW,EADlE,6BC9BCC,EAAO,SAAC,GAGd,IAFHC,EAEE,EAFFA,WACEC,EACA,EADAA,YAGIT,EAAUC,cAYhB,OACI,qCACI,sCAGA,wBACIC,QAhBI,WACZM,IACAR,EAAQU,UAaJ,iBAJJ,OAUI,wBACIR,QAjBK,WACbO,IACAT,EAAQU,UAcJ,sBC0EGC,MA5Ff,WAEE,IAFa,EAQoBC,mBANV,CACrBC,YAAa,GACXC,qBAAsB,OAJb,mBAQNC,EARM,KAQGC,EARH,KAmEb,OAzDAC,QAAQC,IAAIH,GA0DV,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CACEI,KAAK,QADP,SAGE,cAAC,EAAD,CACEX,WAhDM,WACdQ,EAAc,2BACTD,GADQ,IAETF,YAAY,GAAD,mBACRE,EAAQF,aADA,CAET,CACAO,cAAeL,EAAQD,qBACrBO,YAAaC,KAAKC,MAClBC,WAAY,WAyCZf,YAnCO,WACfO,EAAc,2BACTD,GADQ,IAETF,YAAY,GAAD,mBACRE,EAAQF,aADA,CAET,CACAO,cAAeL,EAAQD,qBACrBO,YAAaC,KAAKC,MAClBC,WAAY,eA8BhB,cAAC,IAAD,CACEL,KAAK,IADP,SAGE,cAAC,EAAD,CACEtB,mBAAoBkB,EAAQF,YAAYY,OACxC3B,aAnEQ,WAChBkB,EAAc,2BACTD,GADQ,IAETD,qBAAsBQ,KAAKC,SAG/BN,QAAQC,IAAI,kBAAmBH,EAAQD,uBA8D/Bf,cA3BqB,WAE7B,IAAM2B,EAAYX,EAAQF,YAAYc,KAAI,SAAAC,GAAC,OAAIA,EAAEP,YAAcO,EAAER,iBAEjE,MAAO,CACLf,QAASwB,KAAKC,IAAL,MAAAD,KAAI,YAAQH,IACnBpB,SAAUuB,KAAKE,IAAL,MAAAF,KAAI,YAAQH,KAqBHM,aCrFZC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e8892a1b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\r\n\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nexport const Home = ({\r\n    totalNumberOfGames\r\n    , appStartGame\r\n    , gameTimeFacts\r\n}) => {\r\n\r\n    const history = useHistory();\r\n\r\n    const startGame = () => {\r\n        appStartGame();\r\n        history.push(\"/play\");\r\n    };\r\n\r\n    return(\r\n        <>\r\n            <h1>\r\n                Home ({totalNumberOfGames})\r\n            </h1>\r\n\r\n            <button\r\n                onClick={startGame}\r\n            >\r\n                Play\r\n            </button>\r\n\r\n            <h3>\r\n                { isFinite(gameTimeFacts.longest) ? gameTimeFacts.longest : 0 } Longest Game Ever\r\n            </h3>\r\n\r\n            <h3>\r\n                { isFinite(gameTimeFacts.shortest) ? gameTimeFacts.shortest : 0 } Shortest Game Ever\r\n            </h3>\r\n        </>\r\n    );\r\n};","import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nexport const Play = ({\r\n    appWinGame\r\n    , appLoseGame\r\n}) => {\r\n\r\n    const history = useHistory();\r\n\r\n    const winGame = () => {\r\n        appWinGame();\r\n        history.goBack();\r\n    };\r\n\r\n    const loseGame = () => {\r\n        appLoseGame();\r\n        history.goBack();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <h1>\r\n                Play\r\n            </h1>\r\n            <button\r\n                onClick={winGame}\r\n            >\r\n                Win\r\n            </button>\r\n            &nbsp;\r\n            <button\r\n                onClick={loseGame}\r\n            >\r\n                Lose\r\n            </button>\r\n        </>\r\n    );\r\n};","import logo from './logo.svg';\nimport './App.css';\nimport {\n  BrowserRouter as Router\n  , Switch\n  , Route\n} from 'react-router-dom';\n\nimport { Home } from './Home';\nimport { Play } from './Play';\n\nimport { useState } from 'react';\n\nfunction App() {\n\n  const initialAppData = {\n    gameResults: []\n    , currentGameStartTime: null\n  }\n  ;\n\n  const [appData, updateAppData] = useState(initialAppData);\n\n  console.log(appData);\n\n  //\n  // App notification functions...\n  //\n\n  const startGame = () => {\n    updateAppData({\n      ...appData\n      , currentGameStartTime: Date.now() \n    });\n\n    console.log(\"App.startGame()\", appData.currentGameStartTime);\n\n  };\n\n  const winGame = () => {\n    updateAppData({\n      ...appData\n      , gameResults: [\n        ...appData.gameResults\n        , {\n          startDateTime: appData.currentGameStartTime\n          , endDateTime: Date.now()\n          , gameResult: \"W\"\n        }\n      ]\n    });\n  };\n\n  const loseGame = () => {\n    updateAppData({\n      ...appData\n      , gameResults: [\n        ...appData.gameResults\n        , {\n          startDateTime: appData.currentGameStartTime\n          , endDateTime: Date.now()\n          , gameResult: \"L\"\n        }\n      ]\n    });\n  };\n\n  //\n  // Helper functions...\n  //\n  const calculateGameTimeFacts = () => {\n    \n    const gameTimes = appData.gameResults.map(x => x.endDateTime - x.startDateTime);\n\n    return {\n      longest: Math.max(...gameTimes)\n      , shortest: Math.min(...gameTimes)\n    };\n  };\n\n  return (\n    <Router>\n      <Switch>\n        <Route\n          path=\"/play\"\n        >\n          <Play \n            appWinGame={winGame}\n            appLoseGame={loseGame}\n          />\n        </Route>\n        <Route\n          path=\"/\"\n        >\n          <Home\n            totalNumberOfGames={appData.gameResults.length}\n            appStartGame={startGame}\n            gameTimeFacts={calculateGameTimeFacts()}\n          />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}